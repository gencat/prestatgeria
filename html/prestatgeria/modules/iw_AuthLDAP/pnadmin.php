<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnadmin.php 25144 2008-12-23 19:09:29Z Guite $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_System_Modules
 * @subpackage AuthLDAP
 */

/**
 * The main administration function
 * This function is the default function, and is called whenever the
 * module is initiated without defining arguments.  As such it can
 * be used for a number of things, but most commonly it either just
 * shows the module menu and returns or calls whatever the module
 * designer feels should be the default function (often this is the
 * view() function)
 * @author Mike Goldfinger <MikeGoldfinger@linuxmail.org>
 * @link http://authldap.ch.vu
 * @return string HTML ouptput
 */
function iw_AuthLDAP_admin_main()
{
    // security check
    if (!SecurityUtil::checkPermission('iw_AuthLDAP::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('iw_AuthLDAP', false);

    // return the output that has been generated by this function
    return $render->fetch('authldap_admin_main.htm');
}

/**
 * This is a standard function to modify the configuration parameters of the
 * module
 * @author Mike Goldfinger <MikeGoldfinger@linuxmail.org>
 * @link http://authldap.ch.vu
 * @return string HTML ouptput
 * @todo change group list to dropdown
 */
function iw_AuthLDAP_admin_modifyconfig()
{
    // security check
    if (!SecurityUtil::checkPermission('iw_AuthLDAP::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('iw_AuthLDAP', false);

    // assign module vars
    $render->assign(pnModGetVar('iw_AuthLDAP'));

    $encryptionTypes = array('none' => _NONE,
                             'sha1' => 'sha1',
                             'md5' => 'md5',
                             'sha64bit' => 'sha64bit');
    $render->assign('encryptionTypes', $encryptionTypes);

    // return the output that has been generated by this function
    return $render->fetch('authldap_admin_modifyconfig.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by template_admin_new() to create a new item
 * @author Mike Goldfinger <MikeGoldfinger@linuxmail.org>
 * @link http://authldap.ch.vu
 * @param 'authldap_pnldap' the authentication type
 * @param 'authldap_serveradr' the ip address of the ldap server
 * @param 'basedn' base container in directory
 * @param 'authldap_bindas' user to bind to directory as if required
 * @param 'authldap_bindpass' password of user to bind as
 * @param 'authldap_searchdn' search container
 * @param 'authldap_searchattr' search the User using tis Attribute
 * @return bool true if item created, false otherwise
 */
function iw_AuthLDAP_admin_updateconfig()
{
     // Security check
    if (!SecurityUtil::checkPermission('iw_AuthLDAP::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('iw_AuthLDAP','admin','main'));
    }

    // Update module variables.
    $authldap_pnldap = FormUtil::getPassedValue('authldap_pnldap', 'pn', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_pnldap', $authldap_pnldap);

    $authldap_serveradr = FormUtil::getPassedValue('authldap_serveradr', '127.0.0.1', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_serveradr', $authldap_serveradr);

    $authldap_protocol = FormUtil::getPassedValue('authldap_protocol', '3', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_protocol', $authldap_protocol);

    $authldap_basedn = FormUtil::getPassedValue('authldap_basedn', 'dc=foo,dc=bar', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_basedn', $authldap_basedn);

    $authldap_bindas = FormUtil::getPassedValue('authldap_bindas', '', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_bindas', $authldap_bindas);

    $authldap_bindpass = FormUtil::getPassedValue('authldap_bindpass', '', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_bindpass', $authldap_bindpass);

    $authldap_searchdn = FormUtil::getPassedValue('authldap_searchdn', '', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_searchdn', $authldap_searchdn);

    $authldap_searchattr = FormUtil::getPassedValue('authldap_searchattr', 'uid', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_searchattr', $authldap_searchattr);

    $authldap_hash_method = FormUtil::getPassedValue('authldap_hash_method', '', 'POST');
    pnModSetVar('iw_AuthLDAP', 'authldap_hash_method', $authldap_hash_method);

    $previouslyCreated = FormUtil::getPassedValue('previouslyCreated', '', 'POST');
    pnModSetVar('iw_AuthLDAP', 'previouslyCreated', $previouslyCreated);


    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module', 'updateconfig', 'iw_AuthLDAP', array('module' => 'iw_AuthLDAP'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus(_CONFIGUPDATED);

    // This function generated no output, and so now it is complete we redirect
    // the user to an appropriate page for them to carry on their work
    return pnRedirect(pnModURL('iw_AuthLDAP', 'admin', 'main'));
}
