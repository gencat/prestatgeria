<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2001, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnuser.php 411 2010-04-23 16:02:49Z yokav $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage Pages
 */

/**
 * the main user function
 *
 * @return string html string
 */
function Pages_user_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('Pages::', '::', ACCESS_READ)) {
        return LogUtil::registerPermissionError();
    }

    $dom = ZLanguage::getModuleDomain('Pages');

    // Create output object
    $render = & pnRender::getInstance('Pages');

    $enablecategorization = pnModGetVar('Pages', 'enablecategorization');

    if ($enablecategorization) {
        if (!Loader::loadClass('CategoryRegistryUtil') || !Loader::loadClass('CategoryUtil')) {
            pn_exit(__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil | CategoryUtil', $dom));
        }
        // get the categories registered for the Pages
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Pages', 'pages');
        $properties  = array_keys($catregistry);

        $propertiesdata = array();
        foreach ($properties as $property)
        {
            $rootcat = CategoryUtil::getCategoryByID($catregistry[$property]);
            if (!empty($rootcat)) {
                $rootcat['path'] .= '/'; // add this to make the relative paths of the subcategories with ease - mateo
                $subcategories    = CategoryUtil::getCategoriesByParentID($rootcat['id']);
                $propertiesdata[] = array('name' => $property,
                                          'rootcat' => $rootcat,
                                          'subcategories' => $subcategories);
            }
        }

        // Assign some useful vars to customize the main
        $render->assign('properties', $properties);
        $render->assign('propertiesdata', $propertiesdata);
    }

    // Assign the config vars
    $render->assign('enablecategorization', $enablecategorization);
    $render->assign('shorturls', pnConfigGetVar('shorturls'));
    $render->assign('shorturlstype', pnConfigGetVar('shorturlstype'));
    $render->assign('lang', ZLanguage::getLanguageCode());

    // Return the output that has been generated by this function
    return $render->fetch('pages_user_main.htm');
}

/**
 * view items
 *
 * @return string html string
 */
function Pages_user_view($args)
{
    // Security check
    if (!SecurityUtil::checkPermission('Pages::', '::', ACCESS_OVERVIEW)) {
        return LogUtil::registerPermissionError();
    }

    $dom = ZLanguage::getModuleDomain('Pages');

    $startnum = (int)FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : 1, 'GET');
    $prop     = (string)FormUtil::getPassedValue('prop', isset($args['prop']) ? $args['prop'] : null, 'GET');
    $cat      = (string)FormUtil::getPassedValue('cat', isset($args['cat']) ? $args['cat'] : null, 'GET');

    // defaults and input validation
    if (!is_numeric($startnum) || $startnum < 0) {
        $startnum = 1;
    }

    // get all module vars for later use
    $modvars = pnModGetVar('Pages');

    // check if categorization is enabled
    if ($modvars['enablecategorization']) {
        if (!Loader::loadClass('CategoryUtil') || !Loader::loadClass('CategoryRegistryUtil')) {
            pn_exit(__f('Error! Unable to load class [%s]', 'CategoryUtil | CategoryRegistryUtil', $dom));
        }
        // get the categories registered for the Pages
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Pages', 'pages');
        $properties = array_keys($catregistry);

        // validate the property
        // and build the category filter - mateo
        if (!empty($prop) && in_array($prop, $properties)) {
            // TODO [Perform a category permission check here]

            // if the property and the category are specified
            // means that we'll list the pages that belongs to that category
            if (!empty($cat)) {
                if (!is_numeric($cat)) {
                    $rootCat = CategoryUtil::getCategoryByID($catregistry[$prop]);
                    $cat = CategoryUtil::getCategoryByPath($rootCat['path'].'/'.$cat);
                } else {
                    $cat = CategoryUtil::getCategoryByID($cat);
                }
                if (!empty($cat) && isset($cat['path'])) {
                    // include all it's subcategories and build the filter
                    $categories = categoryUtil::getCategoriesByPath($cat['path'], '', 'path');
                    $catstofilter = array();
                    foreach ($categories as $category) {
                        $catstofilter[] = $category['id'];
                    }
                    $catFilter = array($prop => $catstofilter); 
                } else {
                    LogUtil::registerError(__('Invalid category passed.', $dom));
                }
            }
        }

        // if nothing or only property is specified
        // means that we'll list the subcategories available on a property - mateo
        if (!isset($catFilter)) {
            $listproperties = array();
            // list all the available properties
            if (empty($prop) || !in_array($prop, $properties)) {
                $listproperties = $properties;
            } else {
                $listproperties[] = $prop;
            }
            $listrootcats   = array();
            $listcategories = array();
            $categorylisted = array();
            foreach (array_keys($listproperties) as $i) {
                $listrootcats[$i] = CategoryUtil::getCategoryByID($catregistry[$listproperties[$i]]);
                if (in_array($listrootcats[$i]['id'], $categorylisted)) {
                    continue;
                }
                // mark the root category as already listed
                $categorylisted[] = $listrootcats[$i]['id'];
                // add a final / to make the easy the relative paths build in the template - mateo
                $listrootcats[$i]['path'] .= '/';
                // gets all the subcategories to list
                $listcategories[$i] = CategoryUtil::getCategoriesByParentID($listrootcats[$i]['id']);
            }
            unset($categorylisted);
        }
    }

    // Create output object
    $render = & pnRender::getInstance('Pages');

    // assign various useful template variables
    $render->assign('startnum', $startnum);
    $render->assign('lang', ZLanguage::getLanguageCode());
    $render->assign($modvars);
    $render->assign('shorturls', pnConfigGetVar('shorturls'));
    $render->assign('shorturlstype', pnConfigGetVar('shorturlstype'));

    // If categorization is enabled, show a
    // list of subcategories of an specific property
    if ($modvars['enablecategorization'] && !isset($catFilter)) {
        // Assign the current action to the template
        $render->assign('action', 'subcatslist');

        $render->assign('listrootcats', $listrootcats);
        $render->assign('listproperties', $listproperties);
        $render->assign('listcategories', $listcategories);

    // List of Pages
    // of an specific category if categorization is enabled
    } else {
        // Assign the current action to the template
        $render->assign('action', 'pageslist');

        // Assign the categories information
        if ($modvars['enablecategorization']) {
            $render->assign('properties', $properties);
            $render->assign('category', $cat);
        }

        // Get all matching pages
        $items = pnModAPIFunc('Pages', 'user', 'getall',
                              array('startnum' => $startnum,
                                    'numitems' => $modvars['itemsperpage'],
                                    'category' => isset($catFilter) ? $catFilter : null,
                                    'catregistry' => isset($catregistry) ? $catregistry : null));

        if ($items == false) {
            LogUtil::registerStatus(__('No pages found.', $dom));
        }

        // Loop through each item and display it.
        $pages = array();
        foreach ($items as $item) {
            if (SecurityUtil::checkPermission('Pages::', "$item[title]::$item[pageid]", ACCESS_OVERVIEW)) {
                $render->assign($item);
                if (SecurityUtil::checkPermission('Pages::', "$item[title]::$item[pageid]", ACCESS_READ)) {
                    $pages[] = $render->fetch('pages_user_rowread.htm', $item['pageid']);
                } else {
                    $pages[] = $render->fetch('pages_user_rowoverview.htm', $item['pageid']);
                }
            }
        }
        unset($items);

        // assign the values for the smarty plugin to produce a pager
        $render->assign('pager', array('numitems'     => pnModAPIFunc('Pages', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                                       'itemsperpage' => $modvars['itemsperpage']));

        // assign the item output to the template
        $render->assign('pages', $pages);
    }

    // Return the output that has been generated by this function
    return $render->fetch('pages_user_view.htm');
}

/**
 * display item
 *
 * @return string html string
 */
function Pages_user_display($args)
{
    $pageid   = FormUtil::getPassedValue('pageid', isset($args['pageid']) ? $args['pageid'] : null, 'REQUEST');
    $title    = FormUtil::getPassedValue('title', isset($args['title']) ? $args['title'] : null, 'REQUEST');
    $page     = FormUtil::getPassedValue('page', isset($args['page']) ? $args['page'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    if (!empty($objectid)) {
        $pageid = $objectid;
    }

    // Validate the essential parameters
    if ((empty($pageid) || !is_numeric($pageid)) && empty($title)) {
        return LogUtil::registerArgsError();
    }
    if (!empty($title)) {
        unset($pageid);
    }

    // Set the default page number
    if (empty($page) || $page < 1 || !is_numeric($page)) {
        $page = 1;
    }

    $dom = ZLanguage::getModuleDomain('Pages');

    // Create output object
    $render = & pnRender::getInstance('Pages');

    // Regardless of caching, we need to increment the read count and set the cache ID
    if (isset($pageid)) {
        $render->cache_id = $pageid.'|'.$page;
        $incrementresult = pnModAPIFunc('Pages', 'user', 'incrementreadcount', array('pageid' => $pageid));
    } else {
        $render->cache_id = $title.'|'.$page;
        $incrementresult = pnModAPIFunc('Pages', 'user', 'incrementreadcount', array('title' => $title));
    }
    if ($incrementresult === false) {
        return LogUtil::registerError(__('No such page found.', $dom), 404);
    }

    // determine which template to render this page with
    // A specific template may exist for this page (based on page id)
    if (isset($pageid) && $render->template_exists('pages_user_display_' . $pageid . '.htm')) {
        $template = 'pages_user_display_' . $pageid . '.htm';
    } else {
        $template = 'pages_user_display.htm';
    }

    // check if the contents are cached.
    if ($render->is_cached($template)) {
        return $render->fetch($template);
    }

    if (!Loader::loadClass('CategoryRegistryUtil')) {
        pn_exit(__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil', $dom));
    }
    // get the categories registered for the Pages
    $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Pages', 'pages');

    // Get the page
    if (isset($pageid)) {
        $item = pnModAPIFunc('Pages', 'user', 'get', array('pageid' => $pageid, 'parse' => true, 'catregistry' => (isset($catregistry)) ? $catregistry : null));
    } else {
        $item = pnModAPIFunc('Pages', 'user', 'get', array('title' => $title, 'parse' => true, 'catregistry' => (isset($catregistry)) ? $catregistry : null));
        pnQueryStringSetVar('pageid', $item['pageid']);
    }

    // The return value of the function is checked here
    if ($item === false) {
        return LogUtil::registerError(__('No such page found.', $dom), 404);
    }

    // Explode the review into an array of seperate pages
    $allpages = explode('<!--pagebreak-->', $item['content'] );

    // validates that the requested page exists
    if (!isset($allpages[$page-1])) {
        return LogUtil::registerError(__('No such page found.', $dom), 404);
    }

    // Set the item bodytext to be the required page
    // nb arrays start from zero pages from one
    $item['content'] = trim($allpages[$page-1]);
    $numitems = count($allpages);
    unset($allpages);

    // Display Admin Edit Link
    if (SecurityUtil::checkPermission('Pages::', "$item[title]::$item[pageid]", ACCESS_EDIT)) {
        $item['displayeditlink'] = true;
    }

    // Assign details of the item.
    $render->assign($item);

    $render->assign('shorturls', pnConfigGetVar('shorturls'));
    $render->assign('shorturlstype', pnConfigGetVar('shorturlstype'));
    $render->assign('lang', ZLanguage::getLanguageCode());

    // Now lets assign the informatation to create a pager for the review
    $render->assign('pager', array('numitems'     => $numitems,
                                   'itemsperpage' => 1));

    return $render->fetch($template);
}
